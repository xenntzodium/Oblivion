#temel check point noktasıdır üzerine inşa ederek devam edilecek.Daha gelişmiş versiyonu şuan test aşamsaında.

import requests
import subprocess
import argparse
from datetime import datetime


def run_nmap(command):
    """
    Nmap komutunu çalıştır ve çıktıyı döndür.
    """
    try:
        print(f"[BİLGİ] Nmap komutu çalıştırılıyor: {' '.join(command)}")
        result = subprocess.run(command, text=True, capture_output=True)
        return result.stdout
    except Exception as e:
        print(f"[HATA] Nmap komutu çalıştırılamadı: {e}")
        return None


def perform_scans(target):
    """
    Tüm taramaları gerçekleştir ve sonuçlarını birleştir.
    """
    # Sonuçları birleştirmek için bir liste
    combined_results = []

    # Firewall algılama
    print("[BİLGİ] Firewall kontrolü için ön tarama yapılıyor...")
    firewall_result = run_nmap(["nmap", "-Pn", "-p", "80", "--script", "http-waf-detect", target])

    if firewall_result and "is behind a firewall" in firewall_result:
        print("[BİLGİ] Firewall tespit edildi. Firewall'a uygun tarama başlatılıyor...")
        bypass_result = run_nmap(
            [
                "nmap",
                "-sS",
                "-T2",
                "-A",
                "--data-length", "20",
                "--randomize-hosts",
                "--badsum",
                target,
            ]
        )
        combined_results.append(firewall_result)
        combined_results.append(bypass_result)
    else:
        print("[BİLGİ] Firewall tespit edilmedi. Agresif tarama başlatılıyor...")
        aggressive_result = run_nmap(
            [
                "nmap",
                "-A",
                "-T4",
                target,
            ]
        )
        combined_results.append(firewall_result)
        combined_results.append(aggressive_result)

    # Zafiyet taraması
    print("[BİLGİ] Zafiyet taraması başlatılıyor...")
    vulnerability_result = run_nmap(["nmap", "--script", "vuln", target])
    combined_results.append(vulnerability_result)

    # Tüm sonuçları birleştir
    return "\n".join(filter(None, combined_results))


def analyze_with_deepseek(api_key, combined_results, output_file):
    """
    Birleştirilmiş Nmap sonuçlarını DeepSeek API'ye gönder ve analiz raporu al.
    """
    try:
        print("[BİLGİ] Nmap sonuçları DeepSeek API'ye gönderiliyor...")
        url = "" #kendi sitenizin url girin lütfen. bilgiler deepseekin kendi sayfasında var
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }
        payload = {
            "model": "", #kullandığınız deepseek modelini giriniz
            "messages": [ # deepseeke gönderirken mesaj içeriği olarak aşşağıdaki contentleri girdim siz özel isteğinize göre prompt düzenleyebilirsiniz
                {"role": "system", "content": "You are a cybersecurity assistant analyzing Nmap scan results."},
                {"role": "user", "content": f"Analyze the following Nmap scan results and provide a detailed report on the operating system, services, open ports, and potential vulnerabilities:\n\n{combined_results}"}
            ]
        }

        response = requests.post(url, json=payload, headers=headers)

        if response.status_code != 200:
            print(f"[HATA] API çağrısı başarısız oldu. Status Code: {response.status_code}")
            print(f"Yanıt: {response.text}")
            return None

        response_data = response.json()
        if "choices" in response_data and len(response_data["choices"]) > 0:
            analysis_result = response_data["choices"][0]["message"]["content"]
            print("[BİLGİ] Analiz Sonucu:")
            print(analysis_result)

            # Analizi bir dosyaya kaydet
            with open(output_file, "w") as file:
                file.write(analysis_result)
            print(f"[BİLGİ] Analiz raporu {output_file} dosyasına kaydedildi.")
            return analysis_result
        else:
            print("[HATA] API yanıtı beklenen formatta değil.")
            print(f"[DEBUG] API Yanıtı: {response_data}")
            return None

    except requests.exceptions.RequestException as e:
        print(f"[HATA] DeepSeek ile bağlantı kurulamadı: {e}")
        return None
    except Exception as e:
        print(f"[HATA] DeepSeek ile analiz yapılamadı: {e}")
        return None


def main():
    """
    Ana fonksiyon: Tüm taramaları gerçekleştirir ve analiz raporu oluşturur.
    """
    parser = argparse.ArgumentParser(description="Otomatik Pentest Aracı")
    parser.add_argument("--target", required=True, help="Hedef IP veya hostname (örn: 192.168.1.1)")
    parser.add_argument("--api_key", required=True, help="DeepSeek API anahtarı")
    args = parser.parse_args()

    target = args.target
    api_key = args.api_key
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    nmap_output_file = f"nmap_combined_results_{timestamp}.txt"
    report_output_file = f"pentest_report_{timestamp}.txt"

    # Taramaları gerçekleştir ve sonuçları bir dosyaya kaydet
    combined_results = perform_scans(target)
    with open(nmap_output_file, "w") as file:
        file.write(combined_results)
    print(f"[BİLGİ] Tüm tarama sonuçları {nmap_output_file} dosyasına kaydedildi.")

    # DeepSeek ile analiz yap ve rapor oluştur
    analyze_with_deepseek(api_key, combined_results, report_output_file)


if __name__ == "__main__":
    main()
